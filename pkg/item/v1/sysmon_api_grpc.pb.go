// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/sysmon_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysmonAPI_GetStat_FullMethodName = "/sysmon.v1.SysmonAPI/GetStat"
)

// SysmonAPIClient is the client API for SysmonAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysmonAPIClient interface {
	// Получить статистику
	GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (SysmonAPI_GetStatClient, error)
}

type sysmonAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSysmonAPIClient(cc grpc.ClientConnInterface) SysmonAPIClient {
	return &sysmonAPIClient{cc}
}

func (c *sysmonAPIClient) GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (SysmonAPI_GetStatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SysmonAPI_ServiceDesc.Streams[0], SysmonAPI_GetStat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sysmonAPIGetStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SysmonAPI_GetStatClient interface {
	Recv() (*GetStatResponse, error)
	grpc.ClientStream
}

type sysmonAPIGetStatClient struct {
	grpc.ClientStream
}

func (x *sysmonAPIGetStatClient) Recv() (*GetStatResponse, error) {
	m := new(GetStatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysmonAPIServer is the server API for SysmonAPI service.
// All implementations should embed UnimplementedSysmonAPIServer
// for forward compatibility
type SysmonAPIServer interface {
	// Получить статистику
	GetStat(*GetStatRequest, SysmonAPI_GetStatServer) error
}

// UnimplementedSysmonAPIServer should be embedded to have forward compatible implementations.
type UnimplementedSysmonAPIServer struct {
}

func (UnimplementedSysmonAPIServer) GetStat(*GetStatRequest, SysmonAPI_GetStatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}

// UnsafeSysmonAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysmonAPIServer will
// result in compilation errors.
type UnsafeSysmonAPIServer interface {
	mustEmbedUnimplementedSysmonAPIServer()
}

func RegisterSysmonAPIServer(s grpc.ServiceRegistrar, srv SysmonAPIServer) {
	s.RegisterService(&SysmonAPI_ServiceDesc, srv)
}

func _SysmonAPI_GetStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysmonAPIServer).GetStat(m, &sysmonAPIGetStatServer{stream})
}

type SysmonAPI_GetStatServer interface {
	Send(*GetStatResponse) error
	grpc.ServerStream
}

type sysmonAPIGetStatServer struct {
	grpc.ServerStream
}

func (x *sysmonAPIGetStatServer) Send(m *GetStatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SysmonAPI_ServiceDesc is the grpc.ServiceDesc for SysmonAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysmonAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysmon.v1.SysmonAPI",
	HandlerType: (*SysmonAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStat",
			Handler:       _SysmonAPI_GetStat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/sysmon_api.proto",
}
