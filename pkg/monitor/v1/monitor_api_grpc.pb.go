// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/monitor_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MonitorAPI_GetStat_FullMethodName = "/monitor.v1.MonitorAPI/GetStat"
)

// MonitorAPIClient is the client API for MonitorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorAPIClient interface {
	// Получить статистику
	GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (MonitorAPI_GetStatClient, error)
}

type monitorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorAPIClient(cc grpc.ClientConnInterface) MonitorAPIClient {
	return &monitorAPIClient{cc}
}

func (c *monitorAPIClient) GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (MonitorAPI_GetStatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitorAPI_ServiceDesc.Streams[0], MonitorAPI_GetStat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorAPIGetStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitorAPI_GetStatClient interface {
	Recv() (*GetStatResponse, error)
	grpc.ClientStream
}

type monitorAPIGetStatClient struct {
	grpc.ClientStream
}

func (x *monitorAPIGetStatClient) Recv() (*GetStatResponse, error) {
	m := new(GetStatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorAPIServer is the server API for MonitorAPI service.
// All implementations should embed UnimplementedMonitorAPIServer
// for forward compatibility
type MonitorAPIServer interface {
	// Получить статистику
	GetStat(*GetStatRequest, MonitorAPI_GetStatServer) error
}

// UnimplementedMonitorAPIServer should be embedded to have forward compatible implementations.
type UnimplementedMonitorAPIServer struct {
}

func (UnimplementedMonitorAPIServer) GetStat(*GetStatRequest, MonitorAPI_GetStatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}

// UnsafeMonitorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorAPIServer will
// result in compilation errors.
type UnsafeMonitorAPIServer interface {
	mustEmbedUnimplementedMonitorAPIServer()
}

func RegisterMonitorAPIServer(s grpc.ServiceRegistrar, srv MonitorAPIServer) {
	s.RegisterService(&MonitorAPI_ServiceDesc, srv)
}

func _MonitorAPI_GetStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorAPIServer).GetStat(m, &monitorAPIGetStatServer{stream})
}

type MonitorAPI_GetStatServer interface {
	Send(*GetStatResponse) error
	grpc.ServerStream
}

type monitorAPIGetStatServer struct {
	grpc.ServerStream
}

func (x *monitorAPIGetStatServer) Send(m *GetStatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MonitorAPI_ServiceDesc is the grpc.ServiceDesc for MonitorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.v1.MonitorAPI",
	HandlerType: (*MonitorAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStat",
			Handler:       _MonitorAPI_GetStat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/monitor_api.proto",
}
